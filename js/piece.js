//블럭 배열 = [원본, 90도, 180도, 270도]
const MINOS_ROT = {
  I: [
    [[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]],
    [[0,0,1,0],[0,0,1,0],[0,0,1,0],[0,0,1,0]],
    [[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]],
    [[0,1,0,0],[0,1,0,0],[0,1,0,0],[0,1,0,0]]
  ],
  O: [
    [[1,1],[1,1]],
    [[1,1],[1,1]],
    [[1,1],[1,1]],
    [[1,1],[1,1]]
  ],
  T: [
    [[0,1,0],[1,1,1],[0,0,0]],
    [[0,1,0],[0,1,1],[0,1,0]],
    [[0,0,0],[1,1,1],[0,1,0]],
    [[0,1,0],[1,1,0],[0,1,0]]
  ],
  S: [
    [[0,1,1],[1,1,0],[0,0,0]],
    [[0,1,0],[0,1,1],[0,0,1]],
    [[0,0,0],[0,1,1],[1,1,0]],
    [[1,0,0],[1,1,0],[0,1,0]]
  ],
  Z: [
    [[1,1,0],[0,1,1],[0,0,0]],
    [[0,0,1],[0,1,1],[0,1,0]],
    [[0,0,0],[1,1,0],[0,1,1]],
    [[0,1,0],[1,1,0],[1,0,0]]
  ],
  J: [
    [[1,0,0],[1,1,1],[0,0,0]],
    [[0,1,1],[0,1,0],[0,1,0]],
    [[0,0,0],[1,1,1],[0,0,1]],
    [[0,1,0],[0,1,0],[1,1,0]]
  ],
  L: [
    [[0,0,1],[1,1,1],[0,0,0]],
    [[0,1,0],[0,1,0],[0,1,1]],
    [[0,0,0],[1,1,1],[1,0,0]],
    [[1,1,0],[0,1,0],[0,1,0]]
  ]
};

const MINOS_COLOR = {
  I: 'cyan',
  O: 'yellow',
  T: 'purple',
  S: 'green',
  Z: 'red',
  J: 'blue',
  L: 'orange'
};

// 미노 섞기 - 7-bag
function makeBag() {
  const types = Object.keys(MINOS_ROT);
  
  for (let i = types.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1)); // 무작위 선택
    [types[i], types[j]] = [types[j], types[i]];
  }

  return types.slice();
}

// 회전 보정
const SRS_KICKS = {
  JLSTZ: {
    CW: [ // 시계 방향
      [[0,0], [-1,0], [-1,-1], [0,2], [-1,2]], // 0->1
      [[0,0], [1,0], [1,1], [0,-2], [1,-2]],   // 1->2
      [[0,0], [1,0], [1,-1], [0,2], [1,2]],    // 2->3
      [[0,0], [-1,0], [-1,1], [0,-2], [-1,-2]] // 3->0
    ],
    CCW: [ // 반시계 방향
      [[0,0], [1,0], [1,-1], [0,2], [1,2]],    // 0->3
      [[0,0], [1,0], [1,1], [0,-2], [1,-2]],   // 1->0
      [[0,0], [-1,0], [-1,-1], [0,2], [-1,2]], // 2->1
      [[0,0], [-1,0], [-1,1], [0,-2], [-1,-2]] // 3->2
    ]
  },
  I: {
    CW: [
      [[0,0], [-2,0], [1,0], [-2,1], [1,-2]],
      [[0,0], [-1,0], [2,0], [-1,-2], [2,1]],
      [[0,0], [2,0], [-1,0], [2,-1], [-1,2]],
      [[0,0], [1,0], [-2,0], [1,2], [-2,-1]]
    ],
    CCW: [
      [[0,0], [2,0], [-1,0], [2,-1], [-1,2]],
      [[0,0], [1,0], [-2,0], [1,2], [-2,-1]],
      [[0,0], [-2,0], [1,0], [-2,1], [1,-2]],
      [[0,0], [-1,0], [2,0], [-1,-2], [2,1]]
    ]
  }
};

const gameSettings = {
  gravityAccel: true,
  initGravity: 1,
  ShowNext: true,
  ShowHold: true,
  mode: '기본'
};

const modes = ['기본','스프린트','투명'];

const sounds = {
  move: new Audio('sound/move.wav'),
  rot: new Audio('sound/rot.wav'),
  hard: new Audio('sound/hard.wav'),
  soft: new Audio('sound/soft.wav'),
  hold: new Audio('sound/hold.wav')
};

// 각 사운드 미리 로딩
for (let key in sounds) {
  sounds[key].load();
}

// 재생 함수
function playSound(name) {
  const sound = sounds[name];
  if (sound) {
    sound.currentTime = 0;
    sound.play().catch(err => {
      console.error(`사운드 재생 실패: ${name}`, err);
    });
  }
}